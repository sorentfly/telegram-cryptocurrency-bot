# Press ‚åÉR to execute it or replace it with your code.
# Press Double ‚áß to search everywhere for classes, files, tool windows, actions, and settings.

# Use a breakpoint in the code line below to debug your script.
# Press ‚åòF8 to toggle the breakpoint.

# ---------------------------------------------------------------------------------------
"""
 Settings in BotFather:
   list of commands:
       start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
       help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
       price [cryptocurrency] [currency] - –í—ã–≤–æ–¥–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã [cryptocurrency] –≤ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ –Ω–∞ [currency]
"""
# ---------------------------------------------------------------------------------------

# Libs
import os

from dotenv import load_dotenv
from telegram.ext import Updater, CommandHandler
from pycoingecko import CoinGeckoAPI

import random
import decimal

# Global func
load_dotenv()
cg = CoinGeckoAPI()

# Consts
token = os.environ.get('TOKEN')


# Functions
def start_function(bot, update):
    user = bot.message.from_user
    text = ('–ù—É, –ø—Ä–∏–≤–µ—Ç, {}. ' \
            '\n–î–∞–π —É–≥–∞–¥–∞—Ç—å: –æ–ø—è—Ç—å —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫—Ä–∏–ø—Ç—ã?' \
            '\n–ï—Å–ª–∏ —á—Ç–æ –Ω–µ —è—Å–Ω–æ, –ø–∏—à–∏ /help –∏ —è –ø–æ–º–æ–≥—É :)').format(user['first_name'])
    bot.message.reply_text(text)


def help_function(bot, update):
    text = '–ö–æ—Ä–æ—á–µ, —Ç—É—Ç —Ç–∞–∫–æ–µ –¥–µ–ª–æ: –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - —á–µ–ª–æ–≤–µ–∫ –Ω–µ–¥–∞–ª—ë–∫–∏–π –∏ –ø–æ–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: ' \
           '\n/start: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' \
           '\n/help: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' \
           '\n/price: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É —Å–ª—É—á–∞–π–Ω–æ–π –∫—Ä–∏–ø—Ç—ã' \
           '\n/price YTN\\YENTEN: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç—ã' \
           '\n/price YTN\\YENTEN RUB\\CAD: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ' \
           '\n–í–æ—Ç –∏ –≤—Å—ë, –ª–æ–ª)'
    bot.message.reply_text(text)


def get_price_function(bot, context):
    coins = cg.get_coins_list()
    currency_param = 'usd'

    def get_coin_by_id(coin_id):
        return cg.get_coin_by_id(coin_id,
                                 localization=False,
                                 tickers=False,
                                 market_data=True,
                                 community_data=False,
                                 developer_data=False,
                                 sparkline=False)

    def get_random_coin():
        """

        :return: random coin obj
        """

        def get_coins_ids(_coin):
            return _coin['id']

        coins_ids = list(map(get_coins_ids, coins))
        random_coin_id = random.choice(coins_ids)
        random_coin = get_coin_by_id(random_coin_id)
        return random_coin

    def get_coin_by_param(param):
        param = param.lower()
        coin_by_param = list(filter(
            lambda x: x['symbol'].lower() == param or x['name'].lower() == param, coins)
        )
        if len(coin_by_param) == 0:
            return None

        coin_id_by_param = coin_by_param[0]['id']
        return get_coin_by_id(coin_id_by_param)

    user = bot.message.from_user
    if len(context.args) == 0:
        # In case no args given => return random coin
        try:
            coin = get_random_coin()
        except BaseException:
            bot.message.reply_text('œÄüö™–∞—Å—ã –∏–∑ CoinGecko —Ä–∞–∑–≤—ã—ë–±—ã–≤–∞–ª–∏—Å—å, —Ç–∏–ø–∞ –¥–æ—Ö—É—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–¥—ë—Ç, –ø—Ä–∏–∫–∏–Ω—å?' \
                                   '\n–ö–æ—Ä–æ—á–µ –ø–æ–≥–æ–¥—å –∏ –≤—Å—ë –±—É–¥–µ—Ç —á—ë—Ç–∫–æ.')
            return
        coin_price = coin['market_data']['current_price'][currency_param]  # bitcoin has 8 nums after dot
        # coin_price = decimal.Decimal(coin_price)
        decimal.getcontext().prec = 8
        coin_price = decimal.getcontext().create_decimal(coin_price)
        text = '–£–≤–∞–∂–∞–µ–º—ã–π {}, —è –¥–æ–ª–∂–µ–Ω —Å–∞–º –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫—É—é –∫—Ä–∏–ø—Ç—É –≤—ã–≤–µ—Å—Ç–∏?' \
               '\n–û–∫–µ–π! –ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç {}:\n{} —Å—Ç–æ–∏—Ç {} {}'.format(user['first_name'],
                                                                    coin['name'],
                                                                    coin['symbol'].upper(),
                                                                    coin_price,
                                                                    currency_param.upper())
        bot.message.reply_text(text)
        return

    coin_param = context.args[0]
    if len(context.args) == 2:
        currency_param = context.args[1].lower()
    try:
        coin = get_coin_by_param(coin_param)
        if coin is None:
            bot.message.reply_text(f'–°–∫–∞–∂–∏, —Ç—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ {coin_param} —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? –Ø –Ω–µ –Ω–∞—à—ë–ª...')
            return
    except BaseException:
        bot.message.reply_text('œÄüö™–∞—Å—ã –∏–∑ CoinGecko —Ä–∞–∑–≤—ã—ë–±—ã–≤–∞–ª–∏—Å—å, —Ç–∏–ø–∞ –¥–æ—Ö—É—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–¥—ë—Ç, –ø—Ä–∏–∫–∏–Ω—å?' \
                               '\n–ö–æ—Ä–æ—á–µ –ø–æ–≥–æ–¥—å –∏ –≤—Å—ë –±—É–¥–µ—Ç —á—ë—Ç–∫–æ.')
        return

    try:
        coin_price = coin['market_data']['current_price'][currency_param]
    except BaseException:
        bot.message.reply_text(f'–ù–µ –¥—É–º–∞—é, —á—Ç–æ {currency_param} –ø—Ä–∏–º–µ–Ω–∏–º –∫ –∫–æ–∏–Ω—É {coin_param}, —è –æ—Ç–æ–±—Ä–∞–∂—É –≤ USD')
        currency_param = 'usd'
    coin_price = coin['market_data']['current_price'][currency_param]
    # coin_price = decimal.Decimal(coin_price)
    decimal.getcontext().prec = 8
    coin_price = decimal.getcontext().create_decimal(coin_price)
    text = f'–ö–æ–∏–Ω {coin["name"]}:\n{coin["symbol"].upper()} —Å—Ç–æ–∏—Ç {coin_price} {currency_param.upper()}'
    bot.message.reply_text(text)
    return


def main():
    updater = Updater(token)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start_function))
    dp.add_handler(CommandHandler('help', help_function))
    dp.add_handler(CommandHandler('price', get_price_function, pass_args=True))

    updater.start_polling()
    updater.idle()


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    main()
